package dev.thomazz.lucid.accessor.server.play;

import dev.thomazz.lucid.accessor.PacketAccessor;
import dev.thomazz.lucid.accessor.data.ChunkCoord;
import dev.thomazz.lucid.accessor.data.MultiBlockChangeInfo;
import dev.thomazz.lucid.accessor.data.SectionPosition;
import dev.thomazz.lucid.accessor.data.conversion.Conversions;
import dev.thomazz.lucid.packet.PacketType;
import org.bukkit.Material;

import java.util.Arrays;

/**
* Accessor class generated by script for packet type {@link PacketType.Play.Server#MULTI_BLOCK_CHANGE}
* Some types in getters and setters may not be supported properly yet.
*/
public final class MultiBlockChange extends PacketAccessor {
    public MultiBlockChange(Object handle) {
        super(PacketType.Play.Server.MULTI_BLOCK_CHANGE, handle);
    }

    public MultiBlockChange() {
        super(PacketType.Play.Server.MULTI_BLOCK_CHANGE);
    }

    public SectionPosition getSectionPos() {
        return Conversions.getConverter(SectionPosition.class).fromHandle(this.get(0));
    }

    public void setSectionPos(SectionPosition value) {
        this.set(0, Conversions.getConverter(SectionPosition.class).toHandle(value));
    }

    public ChunkCoord getChunkCoord() {
        return Conversions.getConverter(ChunkCoord.class).fromHandle(this.get(0));
    }

    public void setChunkCoord(ChunkCoord value) {
        this.set(0, Conversions.getConverter(ChunkCoord.class).toHandle(value));
    }

    public short[] getPositions() {
        return this.get(1);
    }

    public void setPositions(short[] value) {
        this.set(1, value);
    }

    public MultiBlockChangeInfo[] getMultiBlockChangeInfo() {
        return Arrays.stream((Object[]) this.get(1)).map(Conversions.getConverter(MultiBlockChangeInfo.class)::fromHandle)
            .toArray(MultiBlockChangeInfo[]::new);
    }

    public void setMultiBlockChangeInfo(MultiBlockChangeInfo[] value) {
        this.set(1, Arrays.stream(value).map(Conversions.getConverter(MultiBlockChangeInfo.class)::toHandle).toArray());
    }

    public Material[] getStates() {
        return Arrays.stream((Object[]) this.get(2))
            .map(Conversions.getConverter(Material.class)::fromHandle)
            .toArray(Material[]::new);
    }

    public void setStates(Material[] value) {
        this.set(2, Arrays.stream(value).map(Conversions.getConverter(Material.class)::toHandle).toArray());
    }

    public boolean getSuppressLightUpdates() {
        return this.get(3);
    }

    public void setSuppressLightUpdates(boolean value) {
        this.set(3, value);
    }
}
