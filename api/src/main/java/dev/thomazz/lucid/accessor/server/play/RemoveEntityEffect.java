package dev.thomazz.lucid.accessor.server.play;

import dev.thomazz.lucid.accessor.PacketAccessor;
import dev.thomazz.lucid.packet.PacketType;
import dev.thomazz.lucid.util.ReflectionUtil;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Arrays;

/**
* Accessor class generated by script for packet type {@link PacketType.Play.Server#REMOVE_ENTITY_EFFECT}
* Some types in getters and setters may not be supported properly yet.
*/
public final class RemoveEntityEffect extends PacketAccessor {
    public RemoveEntityEffect(Object handle) {
        super(PacketType.Play.Server.REMOVE_ENTITY_EFFECT, handle);
    }

    public RemoveEntityEffect() {
        super(PacketType.Play.Server.REMOVE_ENTITY_EFFECT);
    }

    public int getEntityId() {
        return this.get(0);
    }

    public void setEntityId(int value) {
        this.set(0, value);
    }

    public int getEffect() {
        Class<?> type = this.getType(1);

        if (!byte.class.isAssignableFrom(type)) {
            Method found = ReflectionUtil.findMethod(
                type, method -> Modifier.isStatic(method.getModifiers()), method ->
                    Arrays.equals(method.getParameterTypes(), new Class[]{int.class})
            );

            return ReflectionUtil.invokeMethod(found, null, this.get(1));
        }

        return this.get(1);
    }

    public void setEffect(int value) {
        Class<?> type = this.getType(1);

        if (!byte.class.isAssignableFrom(type)) {
            Method found = ReflectionUtil.findMethod(
                type, method -> Modifier.isStatic(method.getModifiers()), method ->
                    Arrays.equals(method.getParameterTypes(), new Class[]{type})
            );

            this.set(1, ReflectionUtil.invokeMethod(found, null, value));
            return;
        }

        this.set(1, value);
    }
}
